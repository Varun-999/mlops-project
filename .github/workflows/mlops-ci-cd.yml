# name: MLOps CI/CD

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# jobs:
#   build-and-train:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4
        
#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.9'

#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r requirements.txt
#           pip install dvc[gdrive]

#       - name: Configure DVC with Google Drive Service Account
#         run: |
#           echo '${{ secrets.GDRIVE_SEC_CRED_DATA }}' > .dvc/dvc-secondary-project-cf006599baee.json
      
#       - name: Verify file location (for debugging)
#         run: |
#           echo "Contents of .dvc/config:"
#           cat .dvc/config
#           echo "---------------------------"
#           echo "Files in the .dvc directory:"
#           ls -la .dvc/

#       - name: Pull specific data from Google Drive (DVC)
#         timeout-minutes: 60
#         # This command will pull whichever .dvc files are in the commit.
#         # For your test, it will only pull fold1.dvc.
#         #testing
#         run: dvc pull -v data/urbansound8k/fold1.dvc
        
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Log in to Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}

#       # Step 4: Build and tag the Docker image
#       - name: Build and push Docker image
#         uses: docker/build-push-action@v4
#         with:
#           context: .
#           push: true # This tells the action to push after building
#           tags: ${{ secrets.DOCKERHUB_USERNAME }}/urbansound-api:latest # Replace with your repo name
#       # - name: Build Docker images
#       #   run: docker compose build

#       - name: Start MLflow server in background
#         run: docker compose up -d mlflow-server

#       - name: Wait for MLflow server to be healthy
#         run: |
#           echo "Waiting for MLflow server..."
#           until curl -s http://localhost:5000 > /dev/null; do
#             sleep 1
#           done
#           echo "MLflow server is up!"

#       - name: Run training job
#         run: docker compose run --rm train-job

#       - name: Stop containers on completion or failure
#         if: always()
#         run: docker compose down

# This workflow builds the Docker image, runs the training job, pushes the image to Docker Hub,
# and then deploys that image to Heroku.

name: MLOps CI/CD & Deploy to Heroku

on:
  push:
    branches: [ main ] # Deploy only on pushes to the main branch
  pull_request:
    branches: [ main ] # Build and train on pull requests, but don't deploy

jobs:
  # JOB 1: Build, Train, and Push the Docker image to Docker Hub
  build-and-train:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install dvc[gdrive]

      - name: Configure DVC with Google Drive Service Account
        run: |
          echo '${{ secrets.GDRIVE_SEC_CRED_DATA }}' > .dvc/dvc-secondary-project-cf006599baee.json

      - name: Pull data from Google Drive (DVC)
        timeout-minutes: 60
        run: dvc pull -v data/urbansound8k/fold1.dvc

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKOKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push application Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile  # Path to your application's Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/urbansound-api:latest

      # --- Training steps using docker-compose (no changes needed here) ---
      - name: Start MLflow server in background
        run: docker compose up -d mlflow-server

      - name: Wait for MLflow server to be healthy
        run: |
          echo "Waiting for MLflow server..."
          until curl -s http://localhost:5000 > /dev/null; do
            sleep 1
          done
          echo "MLflow server is up!"

      - name: Run training job
        run: docker compose run --rm train-job

      - name: Stop containers on completion or failure
        if: always()
        run: docker compose down

  # JOB 2: Deploy the image from Docker Hub to Heroku
  deploy-to-heroku:
    # This job will only run if the 'build-and-train' job completes successfully
    needs: build-and-train
    # This condition ensures deployment only happens on a push to the main branch, not on pull requests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Log in to Heroku Container Registry
        # We need the Heroku API key to be available in the environment for the login command
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:login

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull, Tag, and Push to Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          # 1. Pull the 'latest' image that was just pushed by the previous job
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/urbansound-api:latest

          # 2. Re-tag the image for Heroku's registry
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/urbansound-api:latest registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web

          # 3. Push the newly tagged image to Heroku
          docker push registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web

      - name: Release image on Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:release web --app ${{ secrets.HEROKU_APP_NAME }}
