# name: MLOps CI/CD

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# jobs:
#   build-and-train:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4
        
#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.9'

#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r requirements.txt
#           pip install dvc[gdrive]

#       - name: Configure DVC with Google Drive Service Account
#         run: |
#           echo '${{ secrets.GDRIVE_SEC_CRED_DATA }}' > .dvc/dvc-secondary-project-cf006599baee.json
      
#       - name: Verify file location (for debugging)
#         run: |
#           echo "Contents of .dvc/config:"
#           cat .dvc/config
#           echo "---------------------------"
#           echo "Files in the .dvc directory:"
#           ls -la .dvc/

#       - name: Pull specific data from Google Drive (DVC)
#         timeout-minutes: 60
#         # This command will pull whichever .dvc files are in the commit.
#         # For your test, it will only pull fold1.dvc.
#         #testing
#         run: dvc pull -v data/urbansound8k/fold1.dvc
        
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Log in to Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}

#       # Step 4: Build and tag the Docker image
#       - name: Build and push Docker image
#         uses: docker/build-push-action@v4
#         with:
#           context: .
#           push: true # This tells the action to push after building
#           tags: ${{ secrets.DOCKERHUB_USERNAME }}/urbansound-api:latest # Replace with your repo name
#       # - name: Build Docker images
#       #   run: docker compose build

#       - name: Start MLflow server in background
#         run: docker compose up -d mlflow-server

#       - name: Wait for MLflow server to be healthy
#         run: |
#           echo "Waiting for MLflow server..."
#           until curl -s http://localhost:5000 > /dev/null; do
#             sleep 1
#           done
#           echo "MLflow server is up!"

#       - name: Run training job
#         run: docker compose run --rm train-job

#       - name: Stop containers on completion or failure
#         if: always()
#         run: docker compose down
# name: MLOps CI/CD Pipeline

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# jobs:
#   test-and-build:
#     runs-on: ubuntu-latest
    
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4
        
#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.11'

#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r requirements.txt
#           pip install dvc[gdrive]

#       - name: Configure DVC with Google Drive Service Account
#         run: |
#           echo '${{ secrets.GDRIVE_SEC_CRED_DATA }}' > .dvc/dvc-secondary-project-cf006599baee.json
      
#       - name: Pull specific data from Google Drive (DVC)
#         timeout-minutes: 60
#         run: dvc pull -v data/urbansound8k/fold1.dvc
        
#       - name: Run basic tests (if you have any)
#         run: |
#           # Add your test commands here if you have tests
#           echo "Running tests..."
#           # python -m pytest tests/ -v
        
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Log in to Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}

#       - name: Build and push Docker image
#         uses: docker/build-push-action@v4
#         with:
#           context: .
#           push: true
#           tags: |
#             ${{ secrets.DOCKERHUB_USERNAME }}/urbansound-api:latest
#             ${{ secrets.DOCKERHUB_USERNAME }}/urbansound-api:${{ github.sha }}

#       - name: Start MLflow server in background
#         run: docker compose up -d mlflow-server

#       - name: Wait for MLflow server to be healthy
#         run: |
#           echo "Waiting for MLflow server..."
#           until curl -s http://localhost:5000 > /dev/null; do
#             sleep 1
#           done
#           echo "MLflow server is up!"

#       - name: Run training job
#         run: docker compose run --rm train-job

#       - name: Stop containers
#         if: always()
#         run: docker compose down

#   deploy:
#     needs: test-and-build
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4
        
#       - name: Deploy to Render
#         uses: johnbeynon/render-deploy-action@v0.0.8
#         with:
#           service-id: ${{ secrets.RENDER_SERVICE_ID }}
#           api-key: ${{ secrets.RENDER_API_KEY }}
          
#       - name: Wait for deployment and test
#         run: |
#           echo "Waiting for deployment to complete..."
#           sleep 60
          
#           # Test the deployed API
#           echo "Testing deployed API..."
#           curl -f ${{ secrets.RENDER_SERVICE_URL }}/health || echo "Health check failed"



name: MLOps CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-validate:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install dvc[gdrive]

      - name: Configure DVC with Google Drive Service Account
        run: |
          echo '${{ secrets.GDRIVE_SEC_CRED_DATA }}' > .dvc/dvc-secondary-project-cf006599baee.json
      
      - name: Pull specific data from Google Drive (DVC)
        timeout-minutes: 60
        run: dvc pull -v data/urbansound8k/fold1.dvc
        
      - name: Validate Docker build
        run: |
          echo "Building Docker image for validation..."
          docker build -t urbansound-api-test .
          echo "Docker build successful!"
        
      - name: Run basic tests
        run: |
          echo "Running basic validation tests..."
          python -c "import tensorflow as tf; print('TensorFlow version:', tf.__version__)"
          python -c "import librosa; print('Librosa imported successfully')"
          python -c "import joblib; print('Joblib imported successfully')"
          python -c "import fastapi; print('FastAPI imported successfully')"
        
      - name: Start MLflow server in background
        run: docker compose up -d mlflow-server

      - name: Wait for MLflow server to be healthy
        run: |
          echo "Waiting for MLflow server..."
          until curl -s http://localhost:5000 > /dev/null; do
            sleep 1
          done
          echo "MLflow server is up!"

      - name: Run training job
        run: docker compose run --rm train-job

      - name: Stop containers
        if: always()
        run: docker compose down
        
      - name: Cleanup test image
        if: always()
        run: docker rmi urbansound-api-test || true